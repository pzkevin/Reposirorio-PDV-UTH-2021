<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoHeaderLogin.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SUVORK5CYII=
</value>
  </data>
</root>